# Напишите функцию замены bad на good. Используйте ord и chr, стыдно алфавит руками вбивать.

# ------------------------------------------------------- THEORY ------------------------------------------------------------------------------------ #
# ord(char): Эта функция принимает символ (строку длиной 1) и возвращает его целочисленное представление в кодировке Unicode.
 
# Например:
# ord('b') возвращает 98
# ord('a') возвращает 97
# ord('d') возвращает 100
# ord('g') возвращает 103
# ord('o') возвращает 111

# Таким образом, в списке bad мы получаем:
# bad = [98, 97, 100], что соответствует символам "b", "a", "d".
# А в списке good:
# good = [103, 111, 111, 100], что соответствует символам "g", "o", "o", "d".

# Зачем это нужно?
# Использование кодов символов может быть полезно для низкоуровневой обработки текста или для выполнения определенных операций с символами. 
# Однако в большинстве случаев для работы со строками достаточно использовать сами строки без преобразования их в коды. 
# -------------------------------------------------------------------------------------------------------------------------------------------------- #

def replace_bad_with_good(text):
    bad = [ord('b'), ord('a'), ord('d')]
    good = [ord('g'), ord('o'), ord('o'), ord('d')]
    
    # Получаем длину слова 'bad'
    bad_length = len(bad)
    
    # Создаем список для результата
    result = []
    
    i = 0
    while i < len(text):
        # Проверяем, совпадает ли текущая подстрока с 'bad'
        if (i + bad_length <= len(text) and 
            [ord(c) for c in text[i:i + bad_length]] == bad):
            # Проверяем границы слова
            if (i == 0 or text[i - 1] in [' ', '.', ',', ':', ';', '@', '!', '?']) and (i + bad_length == len(text) or text[i + bad_length] in [' ', '.', ',', ':', ';', '@', '!', '?']):
                # Если совпадает и это отдельное слово, добавляем 'good' в результат
                result.extend(good)
                i += bad_length  # Пропускаем длину 'bad'
            else:
                # Если не отдельное слово, просто добавляем текущий символ
                result.append(ord(text[i]))
                i += 1
        else:
            # Если не совпадает, добавляем текущий символ в результат
            result.append(ord(text[i]))
            i += 1  # Переходим к следующему символу
    
    # Преобразуем список кодов обратно в строку
    return ''.join(chr(c) for c in result)

input_text1 = "I'm a bad girl."
output_text1 = replace_bad_with_good(input_text1)
print(output_text1)

input_text2 = "This is a bad example of a bad function."
output_text2 = replace_bad_with_good(input_text2)
print(output_text2)

input_text3 = "I love badminton."
output_text3 = replace_bad_with_good(input_text3)
print(output_text3)