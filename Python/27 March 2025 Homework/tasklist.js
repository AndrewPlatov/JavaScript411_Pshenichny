// Вычитал, что в JS сильная заморочка со временем: в JS время представляется в миллисекундах.
// Тогда прийдется заморочится с выражением для условной timedelta.

// Будем использовать выражение: 24 * 60 * 60 * 1000 , где:
// 24 — количество часов в сутках
// 60 — количество минут в одном часе
// 60 — количество секунд в одной минуте
// 1000 — количество миллисекунд в одной секунде

// Таким образом, если мы перемножим эти значения, мы получим общее количество миллисекунд в одном дне 86400000 .

// Если надо будет брать несколько дней, то: (дни * 24 * 60 * 60 * 1000). 

// Возникает вопрос: зачем так сложно, можно ли проще ?????

class Task {
    constructor(description, deadline = new Date(Date.now() + 24 * 60 * 60 * 1000)) {
        this.dt = new Date();           // Когда задача была поставлена
        this.deadline = deadline;       // Срок, к которому задачу надо сделать
        this.description = description; // Описание. Подробное и понятное
        this.done = false;              // Сделана или нет?
    }

    // Делает задачу завершённой
    complete() {
        this.done = true;
    }

    // Устанавливает новое описание.
    setDescription(newDescription) {
        this.description = newDescription;
    }

    // Устанавливает новый дедлайн
    setDeadline(newDeadline) {
        this.deadline = newDeadline;
    }

    // Проверяет, сколько осталось дней до срока выполнения?
    // Math.ceil() — функция, которая округляет число вверх до ближайшего целого. 
    // Нужна нам потому, что теоретически можно получить 2.37... дня. Поэтому дни округляем в большую сторону, т.е до 3
    daysDeadline() {
        return Math.ceil((this.deadline - new Date()) / (1000 * 60 * 60 * 24));
    }

    // Проверяет, сколько осталось часов до срока выполнения?
    // Math.floor() — функция, которая округляет число вниз до ближайшего целого.
    // Аналогично дням поступаем с часами. Теоретически часы можно округлять в обе стороны, если не нужна точность.
    // Но для разнообразия возьмем тут округление вниз, чтобы вспомнить обе функции, так как он забылись =(
    hoursDeadline() {
        return Math.floor((this.deadline - new Date()) / (1000 * 60 * 60)) % 24;
    }

    // Сколько дней было дано на задачу?
    daysGiven() {
        return Math.ceil((this.deadline - this.dt) / (1000 * 60 * 60 * 24));
    }
}

// Исходник
const dress = new Task('Сшить джинсовое платье из обрезков');
console.log('Что сделать: ', dress.description);
console.log('Когда поставлена? ', dress.dt);
console.log('К какому сроку? ', dress.deadline);
console.log('Сделано? ', dress.done);

// Установка нового описания и дедлайна
dress.setDescription('К черту платье, делаем плед!');
dress.setDeadline(new Date(Date.now() + 7 * 24 * 60 * 60 * 1000));
console.log('Новое описание: ', dress.description);
console.log('Новый срок: ', dress.deadline);

// Проверка оставшихся дней и часов
console.log('Осталось дней до дедлайна: ', dress.daysDeadline());
console.log('Осталось часов до дедлайна: ', dress.hoursDeadline());
console.log('Сколько дней было дано на задачу: ', dress.daysGiven());

// Завершение задачи
dress.complete();
console.log('Сделано? ', dress.done);